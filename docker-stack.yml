version: "3.3"

volumes:
  keskne-certs:
  keskne-postgres:
  lpme-static:
  rps-static:
  gdlk-static:

secrets:
  keskne_revproxy_amplify_api_key:
    external: true

  keskne_postgres_password:
    external: true
  keskne_s3_access_key:
    external: true
  keskne_s3_secret_key:
    external: true

  keskne_rps_db_password:
    external: true
  keskne_rps_secret_key:
    external: true

  keskne_gdlk_db_password:
    external: true
  keskne_gdlk_secret_key:
    external: true
  keskne_gdlk_open_id__providers__google__client_id:
    external: true
  keskne_gdlk_open_id__providers__google__client_secret:
    external: true

services:
  # ===== Keskne =====
  revproxy:
    image: gcr.io/keskne-283621/keskne-revproxy:${KESKNE_IMAGE_TAG}
    depends_on:
      - rps-api
    # Need mode:host so the client IP gets logged properly
    ports:
      - target: 80
        published: 80
        mode: host
      - target: 443
        published: 443
        mode: host
    environment:
      - ROOT_HOSTNAME=${ROOT_HOSTNAME}
      - RPS_HOSTNAME=${RPS_HOSTNAME}
      - GDLK_HOSTNAME=${GDLK_HOSTNAME}
      - AMPLIFY_API_KEY_FILE=/run/secrets/keskne_revproxy_amplify_api_key
    secrets:
      - keskne_revproxy_amplify_api_key
    volumes:
      - ${KESKNE_LOGS_DIR}/revproxy:/var/log/nginx:rw
      - keskne-certs:/app/certs:ro
      - lpme-static:/app/lpme:ro
      - rps-static:/app/rps:ro
      - gdlk-static:/app/gdlk:ro
    deploy:
      restart_policy:
        condition: any
        delay: 10s

  postgres:
    image: gcr.io/keskne-283621/keskne-postgres:${KESKNE_IMAGE_TAG}
    environment:
      - POSTGRES_USER=root
      - RPS_DB=rps
      - GDLK_DB=gdlk
    secrets:
      - keskne_postgres_password
      - keskne_rps_db_password
      - keskne_gdlk_db_password
    volumes:
      - keskne-postgres:/var/lib/postgresql/data:rw
    deploy:
      restart_policy:
        condition: any
        delay: 10s

  postgres-backup:
    image: gcr.io/keskne-283621/keskne-postgres-backup:${KESKNE_IMAGE_TAG}
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_USER: root
      POSTGRES_PASSWORD_FILE: /run/secrets/keskne_postgres_password
      S3_BUCKET: # This gets loaded from the env file
      S3_ACCESS_KEY_FILE: /run/secrets/keskne_s3_access_key
      S3_SECRET_KEY_FILE: /run/secrets/keskne_s3_secret_key
    secrets:
      - keskne_postgres_password
      - keskne_s3_access_key
      - keskne_s3_secret_key
    deploy:
      restart_policy:
        condition: any
        delay: 10s

  # ===== Main site =====
  lpme:
    image: gcr.io/lucaspickering/lucaspickering.me-static:latest
    volumes:
      - lpme-static:/app/lpme:rw
    # We have to do this to make sure changes in the image get picked up
    command: sh -c "rm -rf /app/lpme/* && cp -r /app/static/* /app/lpme"
    deploy:
      restart_policy:
        condition: none

  # ===== RPS =====
  rps-redis:
    image: redis:5-alpine
    deploy:
      restart_policy:
        condition: any

  rps-api:
    image: lucaspickering/rps-api:latest
    environment:
      - RPS_HOSTNAME=${RPS_HOSTNAME}
      - RPS_LOGGING_DIR=/var/log/rps
      - RPS_REDIS_HOST=rps-redis:6379
      - RPS_DB_HOST=postgres
      - RPS_DB_NAME=rps
      - RPS_DB_USER=rps
    depends_on:
      - postgres
      - rps-redis
    secrets:
      - keskne_rps_db_password
      - keskne_rps_secret_key
    volumes:
      - ${KESKNE_LOGS_DIR}/rps:/var/log/rps:rw
    deploy:
      restart_policy:
        condition: any
        delay: 10s

  rps-static:
    image: lucaspickering/rps-static:latest
    volumes:
      - rps-static:/app/rps:rw
    # We have to do this to make sure changes in the image get picked up
    command: sh -c "rm -rf /app/rps/* && cp -r /app/static/* /app/rps"
    deploy:
      restart_policy:
        condition: none

  # ===== GDLK =====
  gdlk-api:
    image: gcr.io/gdlkit/gdlk-api-prd:latest
    environment:
      # These get loaded by the loader script
      GDLK_DB_HOST: postgres
      GDLK_DB_NAME: gdlk
      # This user is just used for migrations
      GDLK_ROOT_DB_USER: root
      GDLK_ROOT_DB_PASSWORD_FILE: /run/secrets/keskne_postgres_password
      # The webserver uses this user
      GDLK_APP_DB_USER: gdlk
      GDLK_APP_DB_PASSWORD_FILE: /run/secrets/keskne_gdlk_db_password
      GDLK_SECRET_KEY_FILE: /run/secrets/keskne_gdlk_secret_key
      GDLK_GOOGLE_CLIENT_ID_FILE: /run/secrets/keskne_gdlk_open_id__providers__google__client_id
      GDLK_GOOGLE_CLIENT_SECRET_FILE: /run/secrets/keskne_gdlk_open_id__providers__google__client_secret
      # These get loaded directly by the app
      RUST_LOG: debug # TODO lower this
      RUST_BACKTRACE: full
      GDLK_SERVER_HOST: 0.0.0.0:8000
      GDLK_OPEN_ID__HOST_URL: https://${GDLK_HOSTNAME}
    depends_on:
      - postgres
    secrets:
      - keskne_postgres_password
      - keskne_gdlk_db_password
      - keskne_gdlk_secret_key
      - keskne_gdlk_open_id__providers__google__client_id
      - keskne_gdlk_open_id__providers__google__client_secret
    deploy:
      restart_policy:
        condition: any
        delay: 10s

  gdlk-static:
    image: gcr.io/gdlkit/gdlk-frontend-prd:latest
    volumes:
      - gdlk-static:/app/gdlk:rw
    # We have to do this to make sure changes in the image get picked up
    command: sh -c "rm -rf /app/gdlk/* && cp -r /app/static/* /app/gdlk"
    deploy:
      restart_policy:
        condition: none
